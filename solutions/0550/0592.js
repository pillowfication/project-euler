/**
 * Factorial trailing digits 2
 *
 * For any N, let f(N) be the last twelve hexadecimal digits before the
 * trailing zeroes in N!.
 *
 * For example, the hexadecimal representation of 20! is 21C3677C82B40000,
 * so f(20) is the digit sequence 21C3677C82B4.
 *
 * Find f(20!). Give your answer as twelve hexadecimal digits, using uppercase
 * for the digits A to F.
 */

module.exports = () => {
  const sumTable = {
    //       0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
    '00': ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F'],
    '01': ['01', '02', '03', '04', '05', '06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F', '10'],
    '02': ['02', '03', '04', '05', '06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F', '10', '11'],
    '03': ['03', '04', '05', '06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F', '10', '11', '12'],
    '04': ['04', '05', '06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F', '10', '11', '12', '13'],
    '05': ['05', '06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F', '10', '11', '12', '13', '14'],
    '06': ['06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F', '10', '11', '12', '13', '14', '15'],
    '07': ['07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F', '10', '11', '12', '13', '14', '15', '16'],
    '08': ['08', '09', '0A', '0B', '0C', '0D', '0E', '0F', '10', '11', '12', '13', '14', '15', '16', '17'],
    '09': ['09', '0A', '0B', '0C', '0D', '0E', '0F', '10', '11', '12', '13', '14', '15', '16', '17', '18'],
    '0A': ['0A', '0B', '0C', '0D', '0E', '0F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19'],
    '0B': ['0B', '0C', '0D', '0E', '0F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A'],
    '0C': ['0C', '0D', '0E', '0F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B'],
    '0D': ['0D', '0E', '0F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C'],
    '0E': ['0E', '0F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D'],
    '0F': ['0F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E'],
    '10': ['10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F'],
    '11': ['11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F', '20'],
    '12': ['12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F', '20', '21'],
    '13': ['13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F', '20', '21', '22'],
    '14': ['14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F', '20', '21', '22', '23'],
    '15': ['15', '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F', '20', '21', '22', '23', '24'],
    '16': ['16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F', '20', '21', '22', '23', '24', '25'],
    '17': ['17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F', '20', '21', '22', '23', '24', '25', '26'],
    '18': ['18', '19', '1A', '1B', '1C', '1D', '1E', '1F', '20', '21', '22', '23', '24', '25', '26', '27'],
    '19': ['19', '1A', '1B', '1C', '1D', '1E', '1F', '20', '21', '22', '23', '24', '25', '26', '27', '28'],
    '1A': ['1A', '1B', '1C', '1D', '1E', '1F', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29'],
    '1B': ['1B', '1C', '1D', '1E', '1F', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2A'],
    '1C': ['1C', '1D', '1E', '1F', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2A', '2B'],
    '1D': ['1D', '1E', '1F', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2A', '2B', '2C'],
    '1E': ['1E', '1F', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2A', '2B', '2C', '2D']
  }
  const prodTable = {
    //      0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
    '0': ['00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00', '00'],
    '1': ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F'],
    '2': ['00', '02', '04', '06', '08', '0A', '0C', '0E', '10', '12', '14', '16', '18', '1A', '1C', '1E'],
    '3': ['00', '03', '06', '09', '0C', '0F', '12', '15', '18', '1B', '1E', '21', '24', '27', '2A', '2D'],
    '4': ['00', '04', '08', '0C', '10', '14', '18', '1C', '20', '24', '28', '2C', '30', '34', '38', '3C'],
    '5': ['00', '05', '0A', '0F', '14', '19', '1E', '23', '28', '2D', '32', '37', '3C', '41', '46', '4B'],
    '6': ['00', '06', '0C', '12', '18', '1E', '24', '2A', '30', '36', '3C', '42', '48', '4E', '54', '5A'],
    '7': ['00', '07', '0E', '15', '1C', '23', '2A', '31', '38', '3F', '46', '4D', '54', '5B', '62', '69'],
    '8': ['00', '08', '10', '18', '20', '28', '30', '38', '40', '48', '50', '58', '60', '68', '70', '78'],
    '9': ['00', '09', '12', '1B', '24', '2D', '36', '3F', '48', '51', '5A', '63', '6C', '75', '7E', '87'],
    'A': ['00', '0A', '14', '1E', '28', '32', '3C', '46', '50', '5A', '64', '6E', '78', '82', '8C', '96'],
    'B': ['00', '0B', '16', '21', '2C', '37', '42', '4D', '58', '63', '6E', '79', '84', '8F', '9A', 'A5'],
    'C': ['00', '0C', '18', '24', '30', '3C', '48', '54', '60', '6C', '78', '84', '90', '9C', 'A8', 'B4'],
    'D': ['00', '0D', '1A', '27', '34', '41', '4E', '5B', '68', '75', '82', '8F', '9C', 'A9', 'B6', 'C3'],
    'E': ['00', '0E', '1C', '2A', '38', '46', '54', '62', '70', '7E', '8C', '9A', 'A8', 'B6', 'C4', 'D2'],
    'F': ['00', '0F', '1E', '2D', '3C', '4B', '5A', '69', '78', '87', '96', 'A5', 'B4', 'C3', 'D2', 'E1']
  }

  const digits = '0123456789ABCDEF'
  function map (table) {
    Object.keys(table).forEach(key => {
      const row = {}
      for (let i = 0; i < digits.length; ++i) {
        row[digits[i]] = table[key][i]
      }
      table[key] = row
    })
  }
  map(sumTable)
  map(prodTable)

  function addNumbers (a, b) {
    let sum = ''
    let carryOver = '0'

    for (let exp = 0, max = a.length - 1; exp <= max; ++exp) {
      let aDigit = a[max - exp]
      let bDigit = b[max - exp]

      const digitSum = sumTable[sumTable['0' + aDigit][bDigit]][carryOver]
      sum = digitSum[1] + sum
      carryOver = digitSum[0]
    }

    return carryOver + sum
  }

  function multiplyBy (num, multiplier) {
    const products = []

    for (let multiExp = 0, multiMax = multiplier.length - 1; multiExp <= multiMax; ++multiExp) {
      const multi = multiplier[multiMax - multiExp]
      let product = ''
      let carryOver = '0'

      for (let exp = 0, max = num.length - 1; exp <= max; ++exp) {
        let digit = num[max - exp]

        const digitProd = addNumbers(prodTable[digit][multi], '0' + carryOver)
        product = digitProd[2] + product
        carryOver = digitProd[1]
      }

      if (carryOver !== '0') {
        product = carryOver + product
      }
      product += '0'.repeat(multiExp)
      products.push(product)
    }

    let sum = products.pop()
    for (const num of products) {
      sum = addNumbers(sum, '0'.repeat(sum.length - num.length) + num)
      if (sum[0] === '0') {
        sum = sum.slice(1)
      }
    }

    return sum
  }

  function factorial (n) {
    let product = '1'
    let i = '1'
    while (i !== n) {
      product = multiplyBy(product, i)
      i = addNumbers(i, '0'.repeat(i.length - 1) + '1')
      if (i[0] === '0') {
        i = i.slice(1)
      }
    }
    return product
  }

  return factorial(factorial('15')).replace(/0+$/, '').slice(-12)
}
